//teste github

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Messenger.Cliente;

import Messenger.Servidor.Messages;
import Messenger.Servidor.RemoteInterfaceMessenger;
import Messenger.Utils.RWserializable;
import Messenger.Utils.Secrets;
import Messenger.Utils.Serializer;
import Messenger.Utils.Utils;
import java.io.File;
import java.nio.file.Files;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.security.Key;
import java.security.KeyPair;
import java.security.Signature;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;

//
/**
 *
 * @author Ricardo
 */
public class Chat extends javax.swing.JPanel implements Runnable {

    CopyOnWriteArrayList<JTextPane> chats;
    MainGUI mainGUI;
    Key sharedKey;

    RemoteInterfaceMessenger remote;
    DefaultListModel listModel;
    String REMOTE_NAME = "RemoteMsn";
    String host = Login.txtServerIP.getText();
    int port = Integer.parseInt(Login.txtServerPort.getText());
    String UserName;

    /**
     * Creates new form Chat
     *
     * @param mainGUI
     */
    public Chat(MainGUI mainGUI) {
        chats = new CopyOnWriteArrayList<>();
        this.mainGUI = mainGUI;
        initComponents();
    }

    public void init() {
        UserName = Login.getTxtUsername().getText();
        txtLoginUserName.setText(UserName);

        try {

            //localizar o registry do servidor
            Registry registry = LocateRegistry.getRegistry(host, port);
            //obtem a referencia remota
            remote = (RemoteInterfaceMessenger) registry.lookup(REMOTE_NAME);
            //executr o servico
            Utils.writeText(txtStatus, " Messenger: ready");
            KeyPair myKeys;
            myKeys = Secrets.generateKeyPair();
            byte[] key = remote.getSharedkey(myKeys.getPublic());
            key = Secrets.decrypt(key, myKeys.getPrivate());
            sharedKey = (Key) Serializer.toObject(key);

            Utils.writeText(txtStatus, " Messenger : Security ready");
            remote.connectUser(Login.txtUsername.getText());
            Utils.writeText(txtStatus, " Messeger : Autentication ready");
            //escutar o objecto remoto
            new Thread(this).start();

        } catch (Exception ex) {
            Utils.writeText(txtStatus, " Error");
        }
        update.start();
        setAvatar();

    }

    public void setAvatar() {

        try {
            byte[] data = remote.getAvatar(UserName);
            //decripta as mensagens
            //  data = Secrets.decrypt(data, sharedKey);
           Object o = Serializer.toObject(data);
           
            ImageIcon icon = (ImageIcon)o;
 
            Utils.writeImage(paneAvatarChat, icon); 
        } catch (Exception ex) {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        listModel = new DefaultListModel();
        lstUsersOnline = new javax.swing.JList(listModel);
        txtMessage = new javax.swing.JTextField();
        btnSendMessage = new javax.swing.JButton();
        jTab = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtStatus = new javax.swing.JTextPane();
        btnChatTo = new javax.swing.JButton();
        btnFileSend = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        btnCloseConversation = new javax.swing.JButton();
        txtLoginUserName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        paneAvatarChat = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        jScrollPane2.setViewportView(lstUsersOnline);

        btnSendMessage.setText("Send");
        btnSendMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendMessageActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(txtStatus);

        jTab.addTab("Status", jScrollPane3);

        btnChatTo.setText("Chat!");
        btnChatTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChatToActionPerformed(evt);
            }
        });

        btnFileSend.setText("Send File...");
        btnFileSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileSendActionPerformed(evt);
            }
        });

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        btnCloseConversation.setText("Close Conversation");
        btnCloseConversation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseConversationActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(paneAvatarChat);

        jLabel2.setText("UserName:");

        jLabel3.setText("Message to Send:");

        jLabel1.setText("Users Online:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel2)
                        .addGap(31, 31, 31)
                        .addComponent(txtLoginUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTab, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnFileSend, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnChatTo, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCloseConversation, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSendMessage)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtLoginUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(5, 5, 5)
                                .addComponent(jTab, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnChatTo)
                                .addGap(18, 18, 18)
                                .addComponent(btnFileSend)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnCloseConversation)
                                .addGap(12, 12, 12)
                                .addComponent(btnLogout)
                                .addGap(45, 45, 45))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMessage))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSendMessage)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendMessageActionPerformed
        if (jTab.getSelectedIndex() != 0) {
            try {
                int i = jTab.getSelectedIndex();

                Utils.writeText(chats.get(i - 1), " Send : " + txtMessage.getText());

                byte[] data = Serializer.toByteArray(txtMessage.getText());
                data = Secrets.encrypt(data, sharedKey);

                remote.setSecretMessage(data, jTab.getTitleAt(i), UserName);
                txtMessage.setText("");

            } catch (Exception ex) {
                Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSendMessageActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        try {
            remote.disconnectUser(UserName);
            mainGUI.login();
        } catch (RemoteException ex) {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnChatToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChatToActionPerformed
        String UserDestination = lstUsersOnline.getSelectedValue().toString();
        if (lstUsersOnline.getSelectedValue() != null) {
            newChatTo(UserDestination);
        }
    }//GEN-LAST:event_btnChatToActionPerformed


    private void btnFileSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileSendActionPerformed
        if (jTab.getSelectedIndex() != 0) {
            try {
                File file = Utils.getFile();
                String ext = Files.probeContentType(file.toPath());

                int i = jTab.getSelectedIndex();
                //se nao conhecer o tipo retorna null
                if (ext != null) {
                    //se for imagem
                    if (ext.contains("image")) {

                        ImageIcon icon = new ImageIcon(file.getAbsolutePath());

                        Utils.writeText(chats.get(i - 1), " Send : ");
                        Utils.writeImage(chats.get(i - 1), icon);
                        Utils.writeText(chats.get(i - 1), " \n ");
                        byte[] data = Serializer.toByteArray(new ImageIcon(file.getAbsolutePath()));
                        data = Secrets.encrypt(data, sharedKey);

                        remote.setSecretMessage(data, jTab.getTitleAt(i), UserName);
                        txtMessage.setText("");
                        //se nao for imagem e conhecer o tipo
                    } else {
                        sendFile(i, file);
                    }
                } else {
                    //se nao conhecer o tipo
                    sendFile(i, file);
                }
            } catch (Exception ex) {
                Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_btnFileSendActionPerformed

    private void btnCloseConversationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseConversationActionPerformed
        int i = jTab.getSelectedIndex();
        if (i != 0) {
            jTab.remove(i);
        }
    }//GEN-LAST:event_btnCloseConversationActionPerformed

    public void sendFile(int i, File file) {
        try {
            //enviaFicheiro
            Utils.writeText(chats.get(i - 1), " Send : File:" + file.getName());
            Utils.writeText(chats.get(i - 1), " \n ");

            byte[] data = Serializer.toByteArray(RWserializable.readFile(file.getAbsolutePath()));
            data = Secrets.encrypt(data, sharedKey);
            //Assinar a mensagem
            remote.setFile(data, jTab.getTitleAt(i), UserName, file.getName());
            txtMessage.setText("");
        } catch (Exception ex) {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton btnChatTo;
    private javax.swing.JButton btnCloseConversation;
    private javax.swing.JButton btnFileSend;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnSendMessage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    protected javax.swing.JTabbedPane jTab;
    protected javax.swing.JList lstUsersOnline;
    private javax.swing.JTextPane paneAvatarChat;
    private javax.swing.JTextField txtLoginUserName;
    protected javax.swing.JTextField txtMessage;
    private javax.swing.JTextPane txtStatus;
    // End of variables declaration//GEN-END:variables

    JTextArea tst = new JTextArea();

    @Override
    public void run() {
        while (true) {
            try {
                while (remote.hasMessages(UserName)) {
                    Messages m = remote.getSecretMessage(UserName);
                    byte[] data = m.getMessage();
                    //decripta as mensagens
                    data = Secrets.decrypt(data, sharedKey);
                    Object o = Serializer.toObject(data);

                    //se nao existir a Janela do Chat entao cria
                    tst.setName(m.getDestination());
                    if (!containsChatUser(m.getDestination()) && !m.getDestination().equals("txtStatus")) {
                        newChatTo(m.getDestination());
                    }

                    //se o conteudo das mensagens for uma String
                    if (o instanceof String) {
                        String msg = (String) o;
                        //se for para 1 utilizador
                        for (JTextPane jt : chats) {
                            if (jt.getName().equals(m.getDestination())) {
                                Utils.writeText(jt, " Get : " + msg);
                            }
                        }
                        //se for para o Status
                        if (m.getDestination().equals("txtStatus")) {
                            Utils.writeText(txtStatus, " Get : " + msg);
                        }
                        //se for uma imagem mostra
                    } else if (o instanceof ImageIcon) {
                        //imagem para mostrar
                        ImageIcon icon = (ImageIcon) o;
                        //se for para 1 utilizador
                        for (JTextPane jt : chats) {
                            if (jt.getName().equals(m.getDestination())) {
                                Utils.writeText(jt, " Get : ");
                                Utils.writeImage(jt, icon);
                                Utils.writeText(jt, " \n ");
                            }
                        }
                    } else {
                        byte[] file = (byte[]) o;

                        String fileName = m.getFileName();

                        RWserializable.writeFile(data, fileName);
                        for (JTextPane jt : chats) {
                            if (jt.getName().equals(m.getDestination())) {
                                Utils.writeText(jt, " Get : File " + fileName);
                                Utils.writeText(jt, " \n ");
                            }
                        }
                    }
                }
                Thread.sleep(1000);
            } catch (Exception ex) {
                System.out.println("erro");
                Logger
                        .getLogger(Chat.class
                                .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public boolean containsChatUser(String name) {
        for (JTextPane chat : chats) {
            if (chat.getName().equals(name)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Cria uma nova Tab
     *
     * @param UserDestination
     */
    public void newChatTo(String UserDestination) {

        JTextPane j = new JTextPane();
        j.setEditable(false);
        j.setName(UserDestination);
        chats.add(j);
        jTab.add(UserDestination, new JScrollPane(chats.get(chats.size() - 1)));
        jTab.setSelectedIndex(jTab.getTabCount() - 1);
    }

    /**
     * Thread para update da lista de users
     */
    Thread update = new Thread(new Runnable() {
        @Override
        public void run() {
            try {
                while (true) {
                    if (remote.hasUsers()) {
                        for (Object users : remote.getHash().keySet()) {
                            if (!((String) users).equals(UserName)) {
                                if (!listModel.contains((String) users)) {
                                    listModel.addElement((String) users);
                                }
                            }
                        }
                    }
                    Thread.sleep(5000);

                }
            } catch (Exception ex) {
                Logger.getLogger(Chat.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    });

}
